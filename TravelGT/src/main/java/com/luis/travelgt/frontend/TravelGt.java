/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.luis.travelgt.frontend;

import com.luis.travelgt.objetos.Arista;
import com.luis.travelgt.objetos.GrafoDirigido;
import com.luis.travelgt.objetos.Nodo;
import com.luis.travelgt.objetos.Ruta;
import com.luis.travelgt.objetos.TreeB;
import com.luis.travelgt.objetos.utiles.*;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.edisoncor.gui.label.LabelHeader;

/**
 *
 * @author Luis
 */
public class TravelGt extends javax.swing.JFrame {

    public static final String RECARGA = "Clic para recargar mapa...";

    private Calendar calendar;
    int hora, minutos, segundos;

    private Archivo archivo;
    private ManejoDatos manejoDatos;
    private GrafoDirigido grafoDirigido;
    private Utiles utiles;
    private Graphiz graphiz;
    private String origen;
    private String destino;
    private boolean aPie;

    private List<Ruta> listRutas;

    private TreeB treeB;

    private Thread hiloReloj;

    private Reloj reloj;

    private boolean seguir;

    /**
     * Creates new form NewJFrame
     */
    public TravelGt() {
        initComponents();
        setLocationRelativeTo(null);
        ButtonGroup gruop = new ButtonGroup();
        gruop.add(checkPie);
        gruop.add(checkVehiculo);
        origen = "";
        destino = "";
        seguir = true;

        calendar = Calendar.getInstance();

        hora = calendar.get(Calendar.HOUR);
        minutos = calendar.get(Calendar.MINUTE);
        segundos = calendar.get(Calendar.SECOND);

        comboRutas.removeAllItems();
        checkPie.setSelected(true);

        utiles = new Utiles();

        this.archivo = new Archivo();

        graphiz = new Graphiz(archivo);

        this.manejoDatos = new ManejoDatos();

        setIcons();

        bloquearMoverse();

        reloj = new Reloj(this, hora, minutos, segundos);

        hiloReloj = new Thread(reloj);

        hiloReloj.start();

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/travel.jpeg")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        labelHeader1 = new org.edisoncor.gui.label.LabelHeader();
        comboOrigen = new org.edisoncor.gui.comboBox.ComboBoxRound();
        labelHeader2 = new org.edisoncor.gui.label.LabelHeader();
        comboDestino = new org.edisoncor.gui.comboBox.ComboBoxRound();
        btnGenerarRutas = new org.edisoncor.gui.button.ButtonAction();
        btnMoverse = new org.edisoncor.gui.button.ButtonAction();
        checkPie = new rojerusan.RSCheckBox();
        checkVehiculo = new rojerusan.RSCheckBox();
        comboRutas = new RSMaterialComponent.RSComboBoxMaterial();
        btnRutas = new RSMaterialComponent.RSButtonMaterialGradientOne();
        btnReiniciar = new org.edisoncor.gui.button.ButtonAction();
        labelHeader3 = new org.edisoncor.gui.label.LabelHeader();
        pages = new javax.swing.JTabbedPane();
        scroolMapa = new javax.swing.JScrollPane();
        labelMapa = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        labelRect2 = new org.edisoncor.gui.label.LabelRect();
        scrollUbicacion = new javax.swing.JScrollPane();
        labelUbicacion = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        labelRect3 = new org.edisoncor.gui.label.LabelRect();
        scroolMasCorto = new javax.swing.JScrollPane();
        labelCaminosCorto = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        panelCurves1 = new org.edisoncor.gui.panel.PanelCurves();
        buttonAction1 = new org.edisoncor.gui.button.ButtonAction();
        jScrollPane1 = new javax.swing.JScrollPane();
        labelTree = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        labelSetting = new javax.swing.JLabel();
        labelHora = new org.edisoncor.gui.label.LabelHeader();
        labelStop = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuCargar = new javax.swing.JMenuItem();
        menuCargarTrafico = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        itemManual = new javax.swing.JMenuItem();
        itemAcercaDe = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        labelHeader1.setText("Origen");

        comboOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOrigenActionPerformed(evt);
            }
        });

        labelHeader2.setText("Destino");

        comboDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDestinoActionPerformed(evt);
            }
        });

        btnGenerarRutas.setText("Generar rutas");
        btnGenerarRutas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarRutasActionPerformed(evt);
            }
        });

        btnMoverse.setText("Moverse");
        btnMoverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoverseActionPerformed(evt);
            }
        });

        checkPie.setText("A pie");

        checkVehiculo.setText("En veh√≠culo");

        comboRutas.setEditable(true);
        comboRutas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRutasActionPerformed(evt);
            }
        });

        btnRutas.setText("Ver informacion de rutas");
        btnRutas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRutasActionPerformed(evt);
            }
        });

        btnReiniciar.setText("Reiniciar viaje");
        btnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarActionPerformed(evt);
            }
        });

        labelHeader3.setText("Rutas disponibles");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(checkPie, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(labelHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboOrigen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelHeader2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGenerarRutas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMoverse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboRutas, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(btnRutas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReiniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelHeader3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelHeader2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkVehiculo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkPie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnGenerarRutas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRutas, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelHeader3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboRutas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMoverse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pages.setBackground(new java.awt.Color(0, 51, 153));
        pages.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        pages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pagesMouseClicked(evt);
            }
        });

        labelMapa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMapa.setText("Clic para recargar mapa");
        labelMapa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMapaMouseClicked(evt);
            }
        });
        scroolMapa.setViewportView(labelMapa);

        pages.addTab("Ver mapa", scroolMapa);

        jPanel3.setBackground(new java.awt.Color(0, 51, 153));

        labelRect2.setText("Abrir mapa");
        labelRect2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRect2MouseClicked(evt);
            }
        });

        labelUbicacion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelUbicacion.setText("Clic para recargar mapa");
        labelUbicacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelUbicacionMouseClicked(evt);
            }
        });
        scrollUbicacion.setViewportView(labelUbicacion);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollUbicacion, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelRect2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelRect2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollUbicacion, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
        );

        pages.addTab("Ver ubicacion", jPanel3);

        jPanel4.setBackground(new java.awt.Color(0, 51, 153));

        labelRect3.setText("Abrir mapa");
        labelRect3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRect3MouseClicked(evt);
            }
        });

        labelCaminosCorto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCaminosCorto.setText("Clic para recargar mapa...");
        labelCaminosCorto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCaminosCortoMouseClicked(evt);
            }
        });
        scroolMasCorto.setViewportView(labelCaminosCorto);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelRect3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(scroolMasCorto, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelRect3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroolMasCorto, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
        );

        pages.addTab("Camino mas corto", jPanel4);

        jPanel5.setBackground(new java.awt.Color(0, 51, 153));

        buttonAction1.setText("Abrir imagen");
        buttonAction1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction1ActionPerformed(evt);
            }
        });
        panelCurves1.add(buttonAction1, java.awt.BorderLayout.PAGE_START);

        labelTree.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTree.setText("Click para recargar imagen");
        labelTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(labelTree);

        panelCurves1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelCurves1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelCurves1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        pages.addTab("Arbol B", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pages))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pages))
                .addContainerGap())
        );

        jToolBar1.add(labelSetting);
        jToolBar1.add(labelHora);

        labelStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelStopMouseClicked(evt);
            }
        });
        jToolBar1.add(labelStop);

        jMenu1.setText("Archivo");

        menuCargar.setText("Cargar datos");
        menuCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarActionPerformed(evt);
            }
        });
        jMenu1.add(menuCargar);

        menuCargarTrafico.setText("Cargar datos de tr√°fico");
        menuCargarTrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarTraficoActionPerformed(evt);
            }
        });
        jMenu1.add(menuCargarTrafico);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        itemManual.setText("Ver manual");
        itemManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemManualActionPerformed(evt);
            }
        });
        jMenu2.add(itemManual);

        itemAcercaDe.setText("Acerca de...");
        jMenu2.add(itemAcercaDe);

        jMenuBar1.add(jMenu2);

        menuExit.setText("Salir");
        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuExitMouseClicked(evt);
            }
        });
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenuBar1.add(menuExit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarActionPerformed
        // TODO add your handling code here:
        String ruta = archivo.pathChoserOpen();
        manejoDatos.reinicar();
        if (!ruta.equals("")) {
            VerificarDatos verificarDatos = new VerificarDatos(this, archivo.readFile(ruta), manejoDatos, 1);
            verificarDatos.setVisible(true);
            setVisible(false);
        }
    }//GEN-LAST:event_menuCargarActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuExitMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_menuExitMouseClicked

    private void labelMapaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMapaMouseClicked
        // TODO add your handling code here:
        ponerImagenMapa(Archivo.RUTA_IMAGEN_MAPA, labelMapa);
    }//GEN-LAST:event_labelMapaMouseClicked

    private void btnGenerarRutasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarRutasActionPerformed
        // TODO add your handling code here:
        if (checkPie.isSelected()) {
            aPie = true;
        } else if (checkVehiculo.isSelected()) {
            aPie = false;
        }
        if (!manejoDatos.getLugares().isEmpty()) {
            origen = this.comboOrigen.getSelectedItem().toString();
            destino = this.comboDestino.getSelectedItem().toString();
            if (!origen.equals(destino)) {

                if (grafoDirigido.obtenerPosiblesCaminos(origen, destino).isEmpty()) {
                    JOptionPane.showMessageDialog(null, "No existen rutas al destino seleccionado",
                            "RUTAS NO ENCONTRADAS",
                            JOptionPane.INFORMATION_MESSAGE,
                            utiles.getIcon("img/info.jpeg", 45));
                } else {
                    if (aPie) {

                        generarRuta();

                        llenarComboRutas();
                        activarMoverse();
                    } else {
                        Ruta.ID = 0;
                        List<Ruta> dobleVia = grafoDirigido.obtenerRutaDoble(origen, destino);
                        for (Ruta ruta : dobleVia) {
                            System.out.println("ruta: ");
                            System.out.println(Arrays.toString(ruta.getAristas().toArray()));
                        }
                        if (dobleVia.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "No se puede viajar en veh√≠culo",
                                    "NO SE PUEDE VIAJAR EN VEH√çCULO AL LUGAR SELECCIONADO",
                                    JOptionPane.INFORMATION_MESSAGE,
                                    utiles.getIcon("img/info.jpeg", 45));
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "El lugar de origen debe ser diferente al destino.",
                        "Origen y destino",
                        JOptionPane.INFORMATION_MESSAGE,
                        utiles.getIcon("img/info.jpeg", 45));
            }

        } else {
            JOptionPane.showMessageDialog(null, "A√∫n no se han cargado datos",
                    "Nos ha cargado datos",
                    JOptionPane.INFORMATION_MESSAGE,
                    utiles.getIcon("img/info.jpeg", 45));
        }
    }//GEN-LAST:event_btnGenerarRutasActionPerformed

    private void comboDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDestinoActionPerformed

    private void comboOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOrigenActionPerformed
        // TODO add your handling code here:
        System.out.println(comboOrigen.getSelectedItem().toString());
    }//GEN-LAST:event_comboOrigenActionPerformed

    private void btnMoverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoverseActionPerformed
        // TODO add your handling code here:
        int indexSelected = this.comboRutas.getSelectedIndex();

        List<Arista> aristas = grafoDirigido.obtenerTodasLasRutas(origen, destino).get(indexSelected).getAristas();

        String origenAuxi = aristas.get(0).getDestino();

        this.origen = origenAuxi;

        if (origen.equals(destino)) {
            JOptionPane.showMessageDialog(null, "Haz llegado a tu destino",
                    "Viaje completado",
                    JOptionPane.INFORMATION_MESSAGE,
                    utiles.getIcon("img/info.jpeg", 45));
            bloquearMoverse();
        } else {
            generarRuta();
            llenarComboRutas();
            ponerImagenMapa(Archivo.IMG_CAMINOS, labelUbicacion);
            pages.setSelectedIndex(1);
        }
    }//GEN-LAST:event_btnMoverseActionPerformed

    private void itemManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemManualActionPerformed
        // TODO add your handling code here:
        archivo.openFile(Archivo.RUTA_MANUAL);
    }//GEN-LAST:event_itemManualActionPerformed

    private void comboRutasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRutasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboRutasActionPerformed

    private void btnRutasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRutasActionPerformed
        // TODO add your handling code here:
        if (aPie) {
            TableRutas table = new TableRutas(grafoDirigido, origen, destino, 1, listRutas);
            table.setVisible(true);
        } else {
            TableRutas table = new TableRutas(grafoDirigido, origen, destino, 2, listRutas);
            table.setVisible(true);
        }


    }//GEN-LAST:event_btnRutasActionPerformed

    private void btnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarActionPerformed
        // TODO add your handling code here:
        bloquearMoverse();
    }//GEN-LAST:event_btnReiniciarActionPerformed

    private void labelRect2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRect2MouseClicked
        // TODO add your handling code here:
        archivo.openFile(Archivo.IMG_CAMINOS);
    }//GEN-LAST:event_labelRect2MouseClicked

    private void labelRect3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRect3MouseClicked
        // TODO add your handling code here:
        archivo.openFile(Archivo.IMG_CAMINO_CORTO);
    }//GEN-LAST:event_labelRect3MouseClicked

    private void labelUbicacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelUbicacionMouseClicked
        // TODO add your handling code here:
        ponerImagenMapa(Archivo.IMG_CAMINOS, labelUbicacion);
    }//GEN-LAST:event_labelUbicacionMouseClicked

    private void labelCaminosCortoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCaminosCortoMouseClicked
        // TODO add your handling code here:
        ponerImagenMapa(Archivo.IMG_CAMINO_CORTO, labelCaminosCorto);
    }//GEN-LAST:event_labelCaminosCortoMouseClicked

    private void labelTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelTreeMouseClicked
        // TODO add your handling code here:
        ponerImagenMapa(Archivo.IMG_TREE, labelTree);
    }//GEN-LAST:event_labelTreeMouseClicked

    private void buttonAction1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction1ActionPerformed
        // TODO add your handling code here:
        archivo.openFile(Archivo.IMG_TREE);
    }//GEN-LAST:event_buttonAction1ActionPerformed

    private void pagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pagesMouseClicked
        // TODO add your handling code here:
        switch (pages.getSelectedIndex()) {
            case 0 ->
                ponerImagenMapa(Archivo.RUTA_IMAGEN_MAPA, labelMapa);
            case 1 ->
                ponerImagenMapa(Archivo.IMG_CAMINOS, labelUbicacion);
            case 2 ->
                ponerImagenMapa(Archivo.IMG_CAMINO_CORTO, labelCaminosCorto);
            case 3 ->
                ponerImagenMapa(Archivo.IMG_TREE, labelTree);
            default -> {
            }
        }
    }//GEN-LAST:event_pagesMouseClicked

    private void labelStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelStopMouseClicked
        // TODO add your handling code here:
        seguir = !seguir;
        if (seguir) {
            utiles.setIconLabel(labelStop, "/img/stop.jpeg");
            iniciarReloj();
//            reloj = new Reloj(this, hora, minutos, segundos);
//            hiloReloj = new Thread(reloj);
//            hiloReloj.start();
        } else {
            utiles.setIconLabel(labelStop, "/img/run.jpeg");
            pararReloj();
        }

    }//GEN-LAST:event_labelStopMouseClicked

    private void menuCargarTraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarTraficoActionPerformed
        // TODO add your handling code here:
        if (!manejoDatos.getLugares().isEmpty()) {
            String ruta = archivo.pathChoserOpen();
            if (!ruta.equals("")) {
                VerificarDatos ver = new VerificarDatos(this, archivo.readFile(ruta), manejoDatos, 2);
                ver.setVisible(true);
                setVisible(false);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se ha cargado todav√≠a datos de los lugares y destinos",
                    "NO EXISTE DATOS EN EL SISTEMA!!!",
                    JOptionPane.INFORMATION_MESSAGE,
                    utiles.getIcon("img/info.jpeg", 45));
            bloquearMoverse();
        }

    }//GEN-LAST:event_menuCargarTraficoActionPerformed

    private void iniciarReloj() {
        hiloReloj = new Thread(new Runnable() {
            @Override
            public void run() {
                if (seguir) {
                    segundos++;
                    if (segundos > 59) {
                        ++minutos;
                        segundos = 0;
                        if (minutos > 59) {
                            hora++;
                            minutos = 0;
                            if (hora > 23) {
                                hora = 0;
                            }
                        }
                    }
                    labelHora.setText("Hora " + hora + ":" + minutos + ":" + segundos);
                }
                try {
                    Thread.sleep(1000); // Espera 1 segundo
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        hiloReloj.start();
    }

    private void pararReloj() {
        hiloReloj.interrupt();
    }

    public void insertDataToGraph() {
        grafoDirigido = new GrafoDirigido();
        for (Nodo nodo : manejoDatos.getLugares()) {
            grafoDirigido.agregarVertice(nodo.getNombre());
        }
        for (Arista aristasDato : manejoDatos.getAristasDatos()) {
            grafoDirigido.agregarArista(aristasDato.getOrigen(), aristasDato.getDestino(), aristasDato);
        }
        for (Nodo lugar : manejoDatos.getLugares()) {
            comboOrigen.addItem(lugar.getNombre());
            comboDestino.addItem(lugar.getNombre());
        }
        graphiz.dibujar(grafoDirigido.mostrarGrafo(), Archivo.RUTA_IMAGEN_MAPA, Archivo.RUTA_ARCHIVO_DOT);
    }

    public void ponerImagenMapa(String ruta, JLabel label) {
        try {
            BufferedImage imagen = ImageIO.read(new File(ruta));
            int ancho = imagen.getWidth();
            int alto = imagen.getHeight();

            label.setText("");
            utiles.setIconLabel(label, ruta, ancho, alto);
            //panelMapa.repaint();
            //panelMapa.revalidate();
        } catch (IOException ex) {
            Logger.getLogger(TravelGt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarComboRutas() {
        comboRutas.removeAllItems();
        List<Ruta> rutas = listRutas;
        for (int i = 0; i < rutas.size(); i++) {
            comboRutas.addItem(rutas.get(i).getId() + " " + utiles.getRuta(rutas.get(i).getAristas(), origen, destino));
        }

    }

    private void generarRuta() {
//        System.out.println(grafoDirigido.mostrarRutaMasCorta3(origen, destino, "black"));
//        System.out.println(grafoDirigido.mostrarCaminos(origen, destino, "red"));

        System.out.println("tam " + grafoDirigido.obtenerPosiblesCaminos(origen, destino).size());
//        System.out.println("posibles caminos: ");
//        for (int i = 0; i < grafoDirigido.obtenerPosiblesCaminos(origen, destino).size(); i++) {
//            System.out.println("camino:");
//            for (int j = 0; j < grafoDirigido.obtenerPosiblesCaminos(origen, destino).get(i).size(); j++) {
//                System.out.print(grafoDirigido.obtenerPosiblesCaminos(origen, destino).get(i).get(j) + " ");
//            }
//        }
        System.out.println("");
        treeB = new TreeB(5);
        for (int i = 0; i < grafoDirigido.obtenerPosiblesCaminos(origen, destino).size(); i++) {
            treeB.insertar(i);
        }
        treeB.setCaminos(grafoDirigido.obtenerPosiblesCaminos(origen, destino));

//        System.out.println("ruta mas corta: ");
//        for (int i = 0; i < grafoDirigido.obtenerRutaMasCorta(origen, destino).size(); i++) {
//            System.out.println(grafoDirigido.obtenerRutaMasCorta(origen, destino).get(i).toString());
//        }
        Ruta.ID = 0;
        listRutas = grafoDirigido.obtenerTodasLasRutas(origen, destino);
//        for (int i = 0; i < listRutas.size(); i++) {
//            System.out.println("RUTA:");
//            for (int j = 0; j < listRutas.get(i).getAristas().size(); j++) {
//                System.out.println(listRutas.get(i).getAristas().get(j).toString());
//            }
//        }

        graphiz.dibujar(grafoDirigido.mostrarRutaMasCorta(origen, destino, "black"), Archivo.IMG_CAMINO_CORTO, Archivo.DOT_CORTA);
        graphiz.dibujar(grafoDirigido.mostrarCaminos(origen, destino, "green"), Archivo.IMG_CAMINOS, Archivo.DOT_CAMINOS);
        graphiz.dibujar(treeB.graficaList(), Archivo.IMG_TREE, Archivo.DOT_TREE);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonAction btnGenerarRutas;
    private org.edisoncor.gui.button.ButtonAction btnMoverse;
    private org.edisoncor.gui.button.ButtonAction btnReiniciar;
    private RSMaterialComponent.RSButtonMaterialGradientOne btnRutas;
    private org.edisoncor.gui.button.ButtonAction buttonAction1;
    private rojerusan.RSCheckBox checkPie;
    private rojerusan.RSCheckBox checkVehiculo;
    private org.edisoncor.gui.comboBox.ComboBoxRound comboDestino;
    private org.edisoncor.gui.comboBox.ComboBoxRound comboOrigen;
    private RSMaterialComponent.RSComboBoxMaterial comboRutas;
    private javax.swing.JMenuItem itemAcercaDe;
    private javax.swing.JMenuItem itemManual;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labelCaminosCorto;
    private org.edisoncor.gui.label.LabelHeader labelHeader1;
    private org.edisoncor.gui.label.LabelHeader labelHeader2;
    private org.edisoncor.gui.label.LabelHeader labelHeader3;
    private org.edisoncor.gui.label.LabelHeader labelHora;
    private javax.swing.JLabel labelMapa;
    private org.edisoncor.gui.label.LabelRect labelRect2;
    private org.edisoncor.gui.label.LabelRect labelRect3;
    private javax.swing.JLabel labelSetting;
    private javax.swing.JLabel labelStop;
    private javax.swing.JLabel labelTree;
    private javax.swing.JLabel labelUbicacion;
    private javax.swing.JMenuItem menuCargar;
    private javax.swing.JMenuItem menuCargarTrafico;
    private javax.swing.JMenu menuExit;
    private javax.swing.JTabbedPane pages;
    private org.edisoncor.gui.panel.PanelCurves panelCurves1;
    private javax.swing.JScrollPane scrollUbicacion;
    private javax.swing.JScrollPane scroolMapa;
    private javax.swing.JScrollPane scroolMasCorto;
    // End of variables declaration//GEN-END:variables

    private void setIcons() {
        utiles.setIconMenuItem(itemManual, "/img/manual.jpeg");
        utiles.setIconMenuItem(menuCargar, "/img/carga.jpeg");
        utiles.setIconMenuItem(menuCargarTrafico, "/img/trafico.png");
        utiles.setIconMenuItem(menuExit, "/img/close.jpeg");
        labelSetting.setSize(20, 20);
        utiles.setIconLabel(labelSetting, "/img/setting.png");
        labelStop.setSize(20, 20);
        utiles.setIconLabel(labelStop, "/img/stop.jpeg");
    }

    private void bloquearMoverse() {
        btnMoverse.setEnabled(false);
        btnReiniciar.setEnabled(false);
        btnRutas.setEnabled(false);
        comboRutas.setEnabled(false);

        comboDestino.setEnabled(true);
        comboOrigen.setEnabled(true);
        btnGenerarRutas.setEnabled(true);
        checkPie.setEnabled(true);
        checkVehiculo.setEnabled(true);
    }

    private void activarMoverse() {
        btnMoverse.setEnabled(true);
        btnReiniciar.setEnabled(true);
        btnRutas.setEnabled(true);
        comboRutas.setEnabled(true);

        comboDestino.setEnabled(false);
        comboOrigen.setEnabled(false);
        btnGenerarRutas.setEnabled(false);
        checkPie.setEnabled(false);
        checkVehiculo.setEnabled(false);
    }

    public LabelHeader getLabelHora() {
        return labelHora;
    }

    public boolean isSeguir() {
        return seguir;
    }

}
